% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_aweek.R
\name{make_aweek}
\alias{make_aweek}
\title{Create an aweek object from an integer vector of weeks}
\usage{
make_aweek(week = 1L, year = format(Sys.Date(), "\%Y"), day = 1L,
  start = get_week_start(), week_start = get_week_start(), ...)
}
\arguments{
\item{week}{an integer vector, defaults to 1, representing the first week of the year.}

\item{year}{an integer vector, defaults to the current year}

\item{day}{an integer vector, defaults to 1, representing the first day of
the first week of the year.}

\item{start}{an integer (or character) vector of days that the weeks
start on. Defaults to the value of \code{get_week_start()}}

\item{week_start}{a number indicating the start of the week based on the ISO
8601 standard from 1 to 7 where 1 = Monday OR an abbreviation of the
weekdate in an English or current locale. \emph{Note: using a non-English locale
may render your code non-portable.} Defaults to the value of
\code{\link[=get_week_start]{get_week_start()}}}

\item{...}{parameters passed on to \code{\link[=date2week]{date2week()}}}
}
\description{
This is a vectorized function that takes in integer vectors and returns
an aweek object, making it easier to convert bare weeks to dates.
}
\note{
Any missing weeks, years, or week_start variables will result in a missing
element in the resulting aweek vector. Any missing days will revert to the
first day of the week.
}
\examples{

# The default results in the first week of the year using the default
# default week_start (from get_week_start())

make_aweek()
as.Date(make_aweek())

# you can use this to quickly make a week without worrying about formatting
# here, you can define an observation interval of 20 weeks

obs_start <- as.Date(make_aweek(week = 10, year = 2018))
obs_end   <- as.Date(make_aweek(week = 29, year = 2018, day = 7))
c(obs_start, obs_end)

# If you have a data frame of weeks, you can use it to convert easily

mat <- matrix(c(
  2019, 11, 1, 7, # 2019-03-10
  2019, 11, 2, 7,
  2019, 11, 3, 7,
  2019, 11, 4, 7,
  2019, 11, 5, 7,
  2019, 11, 6, 7,
  2019, 11, 7, 7
), ncol = 4, byrow = TRUE)
colnames(mat) <- c("year", "week", "day", "start")
m <- as.data.frame(mat)
m
sun <- with(m, make_aweek(week, year, day, start, week_start = 7))
sun
as.Date(sun)

# You can also change starts
mon <- with(m, make_aweek(week, year, day, "Monday", week_start = "Monday"))
mon
as.Date(mon)

# If you use multiple week starts, it will convert to date and then to
# the correct week, so it won't appear to match up with the original
# data frame.

sft <- with(m, make_aweek(week, year, day, 7:1, week_start = "Sunday"))
sft
as.Date(sft)

}
